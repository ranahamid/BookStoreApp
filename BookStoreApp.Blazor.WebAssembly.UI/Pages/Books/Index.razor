@page "/books/"

@inject IBookService BookService
@inject IJSRuntime js
<h3>Books</h3>
@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    if (Books == null)
    {
        <div class="alert alert-info">
            <h4>Loading data...</h4>
        </div>

    }
    else
    {
        <AuthorizeView Roles="Administrator">
            <a class="btn btn-dark" href="/Books/create"><span class="oi oi-plus"></span> Create</a>
        </AuthorizeView>
        <br />
        <table class="table table-bordered">
            <thead>
                <tr>
                    <td></td>
                    <td>Title</td>
                    <td>Price</td>
                    <td>Author Name</td>
                    <td>Action</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var Book in Books)
                {
                    <tr>
                        <td>
                            <img src="@Book.Image" height="50" width="50" />
                        </td>
                        <td>@Book.Title</td>
                        <td>@Book.Price.ToString("C")</td>
                        <td>
                            <a class="btn btn-link" href="/authors/details/@Book.AuthorId">@Book.AuthorName</a>
                        </td>
                        <td>
                            <a class="btn btn-primary" href="/Books/details/@Book.Id"><span class="oi oi-book"></span> Details</a>
                            <AuthorizeView>
                                <a class="btn btn-warning" href="/Books/update/@Book.Id"><span class="oi oi-book"></span> Edit</a>
                                <a class="btn btn-danger" @onclick=@(()=>Delete(@Book.Id))><span class="oi oi-book"></span> Delete</a>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}


@code {
    private List<BookReadOnlyDto> Books = new List<BookReadOnlyDto>();
    private Response<List<BookReadOnlyDto>> response = new Response<List<BookReadOnlyDto>>
    {
       Success = true
    };

    protected override async Task OnInitializedAsync()
    {
        response = await BookService.Get();
        if (response.Success)
        {
            Books = response.Data;
        }
    }
    private async Task Delete(int BookId)
    {
        var Book = Books.First(x => x.Id == BookId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {Book.Title} {Book.Price}");
        if (confirm)
        {
            var response = await BookService.Delete(BookId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
