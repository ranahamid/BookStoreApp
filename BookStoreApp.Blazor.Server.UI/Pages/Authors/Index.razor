@page "/authors/"

@inject IAuthorService authorService
@inject IJSRuntime js
<h3>Authors</h3>
@if (response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
    if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading data...</h4>
        </div>

    }
    else
    {
        <AuthorizeView>
            <a class="btn btn-dark" href="/authors/create"><span class="oi oi-plus"></span> Create</a>
        </AuthorizeView>
        <br />
        <table>
            <thead>
                <tr>
                    <td>First Name</td>
                    <td>Last Name</td>
                    <td>Action</td>
                </tr>
            </thead>
            <tbody>
                @foreach(var author in Authors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                                <a class="btn btn-primary" href="/authors/details/@author.Id"><span class="oi oi-book"></span> Details</a>
                                <AuthorizeView>
                                     <a class="btn btn-warning" href="/authors/update/@author.Id"><span class="oi oi-book"></span> Edit</a>
                                       <a class="btn btn-danger" @onclick=@(()=>Delete(@author.Id))><span class="oi oi-book"></span> Delete</a>
                                </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
@code {
    private List<AuthorReadOnlyDto> Authors;
    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>>
        {
            Success = true
        };

    protected override async Task OnInitializedAsync()
    {
        response = await authorService.Get();
        if (response.Success)
        {
            Authors = response.Data;
        }
    }
    private async Task Delete(int authorId)
    {
        var author = Authors.First(x => x.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {author.FirstName} {author.LastName}");
        if (confirm)
        {
            var response = await authorService.Delete(authorId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
