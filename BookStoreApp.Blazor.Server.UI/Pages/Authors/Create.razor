@page "/authors/create"

@inject IAuthorService authorService
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles =Roles.Administrator)]

<h3>Create New Author</h3>
<EditForm Model="Author" OnValidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
            <label for="email">First Name</label>
            <InputText class="form-control" @bind-Value="Author.FirstName"/>
            <ValidationMessage For="@(()=> Author.FirstName)"></ValidationMessage>
        </div>
        
        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText class="form-control" @bind-Value="Author.LastName"/>
            <ValidationMessage For="@(()=> Author.LastName)"></ValidationMessage>
        </div>

        <div class="form-group">
            <label for="email">Biography</label>
            <InputTextArea class="form-control" @bind-Value="Author.Bio"/>
            <ValidationMessage For="@(()=> Author.Bio)"></ValidationMessage>
        </div>

            <button type="submit" class="btn btn-primary btn-danger"><span class="oi oi-pencil"></span> Create Author</button>
            <button type="button" @onclick="BackToAuthorList" class="btn btn-primary btn-danger"><span class="oi oi-media-skip-backward"></span> Back</button>

</EditForm>

@code {
    private AuthorCreateDto Author = new AuthorCreateDto();
    private async Task HandleCreateAuthor()
    {
        var response =await  authorService.Create(author: Author);
        if (response.Success)
        {
            BackToAuthorList();
        }
    } 
    private void BackToAuthorList()
    {
        _navigationManager.NavigateTo("/authors/");
    }
}
